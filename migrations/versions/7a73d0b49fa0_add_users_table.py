"""Add users table

Revision ID: 7a73d0b49fa0
Revises: 
Create Date: 2024-11-19 13:03:45.096934

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '7a73d0b49fa0'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('users')
    op.drop_table('map_items')
    op.drop_table('prices')
    op.drop_table('watched_cruises')
    op.drop_table('notifications')
    with op.batch_alter_table('saved_searches', schema=None) as batch_op:
        batch_op.add_column(sa.Column('id', sa.Integer(), nullable=False))
        batch_op.alter_column('user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.alter_column('destination',
               existing_type=sa.VARCHAR(length=255),
               nullable=False)
        batch_op.alter_column('price_min',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               type_=sa.Float(),
               nullable=False)
        batch_op.alter_column('price_max',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               type_=sa.Float(),
               nullable=False)
        batch_op.drop_constraint('saved_searches_user_id_fkey', type_='foreignkey')
        batch_op.drop_column('return_date')
        batch_op.drop_column('departure_date')
        batch_op.drop_column('search_id')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('saved_searches', schema=None) as batch_op:
        batch_op.add_column(sa.Column('search_id', sa.INTEGER(), autoincrement=True, nullable=False))
        batch_op.add_column(sa.Column('departure_date', sa.DATE(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('return_date', sa.DATE(), autoincrement=False, nullable=True))
        batch_op.create_foreign_key('saved_searches_user_id_fkey', 'users', ['user_id'], ['user_id'], ondelete='CASCADE')
        batch_op.alter_column('price_max',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=10, scale=2),
               nullable=True)
        batch_op.alter_column('price_min',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=10, scale=2),
               nullable=True)
        batch_op.alter_column('destination',
               existing_type=sa.VARCHAR(length=255),
               nullable=True)
        batch_op.alter_column('user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.drop_column('id')

    op.create_table('notifications',
    sa.Column('notification_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('search_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('watch_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('sent_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['search_id'], ['saved_searches.search_id'], name='notifications_search_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], name='notifications_user_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['watch_id'], ['watched_cruises.watch_id'], name='notifications_watch_id_fkey'),
    sa.PrimaryKeyConstraint('notification_id', name='notifications_pkey')
    )
    op.create_table('watched_cruises',
    sa.Column('watch_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('cruise_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('departure_port', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('departure_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('return_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('price', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], name='watched_cruises_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('watch_id', name='watched_cruises_pkey')
    )
    op.create_table('prices',
    sa.Column('price_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('search_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('price', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('detected_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['search_id'], ['saved_searches.search_id'], name='prices_search_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('price_id', name='prices_pkey')
    )
    op.create_table('map_items',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('description', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('longitude', sa.NUMERIC(precision=10, scale=6), autoincrement=False, nullable=False),
    sa.Column('latitude', sa.NUMERIC(precision=10, scale=6), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='map_items_pkey')
    )
    op.create_table('users',
    sa.Column('user_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('password_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('user_id', name='users_pkey'),
    sa.UniqueConstraint('email', name='users_email_key')
    )
    # ### end Alembic commands ###
